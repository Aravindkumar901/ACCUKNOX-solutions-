Solution for Problem Statement 1:


## Project Plan for Containerisation and Deployment of Wisecow Application on Kubernetes

### Overview
The goal of this project is to containerize the Wisecow application, deploy it on a Kubernetes cluster, and set up a CI/CD pipeline using GitHub Actions. Additionally, we will implement secure TLS communication for the application.

### Step-by-Step Approach

#### 1. Dockerization

**Objective**: Create a Dockerfile for the Wisecow application.

- **Action Items**:
  - Clone the Wisecow repository.
  - Create a `Dockerfile` in the root directory of the application.

**Sample Dockerfile**:
```Dockerfile
# Use the official Node.js image.
FROM node:14

# Set the working directory
WORKDIR /usr/src/app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the application source code
COPY . .

# Expose the application port
EXPOSE 3000

# Command to run the application
CMD ["npm", "start"]
```

#### 2. Kubernetes Deployment

**Objective**: Create Kubernetes manifest files for deploying the Wisecow application.

- **Action Items**:
  - Create a `k8s` directory to hold the Kubernetes manifests.
  - Create the necessary YAML files for deployment, service, and TLS configuration.

**Sample Kubernetes Manifests**:
- **Deployment** (`deployment.yaml`):
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wisecow-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: wisecow
  template:
    metadata:
      labels:
        app: wisecow
    spec:
      containers:
      - name: wisecow
        image: <your-docker-image>
        ports:
        - containerPort: 3000
```

- **Service** (`service.yaml`):
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wisecow-service
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 3000
  selector:
    app: wisecow
```

- **TLS Configuration**: You may need to create a Secret for TLS certificates and adjust the deployment accordingly.

#### 3. Continuous Integration and Deployment (CI/CD)

**Objective**: Set up a GitHub Actions workflow for automated builds and deployments.

- **Action Items**:
  - Create a `.github/workflows` directory.
  - Create a workflow file (`ci-cd.yaml`) for building and deploying.

**Sample GitHub Actions Workflow** (`ci-cd.yaml`):
```yaml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: <your-docker-image>

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
```

#### 4. TLS Implementation

**Objective**: Ensure secure TLS communication.

- **Action Items**:
  - Generate or obtain a TLS certificate.
  - Create a Kubernetes Secret to store the certificate and key.
  - Modify the Wisecow application to use HTTPS.

**Sample Secret Creation**:
```bash
kubectl create secret tls wisecow-tls --cert=path/to/tls.crt --key=path/to/tls.key
```

#### 5. Repository Management

- **Repository Setup**: Ensure the repository is public.
- **Artifacts**: Ensure all files are in place:
  - Dockerfile
  - Kubernetes manifests
  - GitHub Actions workflow

### End Goal
The successful containerization and deployment of the Wisecow application on Kubernetes with an automated CI/CD pipeline and secured with TLS communication.

### Next Steps
1. Implement the above steps in the GitHub repository.
2. Test the deployment and CI/CD workflow.
3. Verify TLS communication works correctly. 

This structured approach will help ensure a smooth implementation of the project requirements.




Solution for Problem Statement 1:



Sure! Let's tackle the first two objectives: **System Health Monitoring Script** and **Automated Backup Solution**. Iâ€™ll provide both a Bash script for monitoring system health and a Python script for automating backups.

### 1. System Health Monitoring Script (Bash)

This script checks CPU usage, memory usage, disk space, and running processes. If any metrics exceed predefined thresholds, it logs an alert.

```bash
#!/bin/bash

# Thresholds
CPU_THRESHOLD=80
MEM_THRESHOLD=80
DISK_THRESHOLD=90
LOGFILE="/var/log/system_health.log"

# Function to check CPU usage
check_cpu() {
    CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    if (( $(echo "$CPU_USAGE > $CPU_THRESHOLD" | bc -l) )); then
        echo "$(date): CPU usage is high: ${CPU_USAGE}%" >> $LOGFILE
    fi
}

# Function to check memory usage
check_memory() {
    MEM_USAGE=$(free | awk '/Mem/{printf("%.0f"), $3/$2 * 100.0}')
    if [ "$MEM_USAGE" -gt "$MEM_THRESHOLD" ]; then
        echo "$(date): Memory usage is high: ${MEM_USAGE}%" >> $LOGFILE
    fi
}

# Function to check disk usage
check_disk() {
    DISK_USAGE=$(df / | grep / | awk '{ print $5 }' | sed 's/%//g')
    if [ "$DISK_USAGE" -gt "$DISK_THRESHOLD" ]; then
        echo "$(date): Disk usage is high: ${DISK_USAGE}%" >> $LOGFILE
    fi
}

# Function to check running processes
check_processes() {
    HIGH_PROCESSES=$(ps aux --sort=-%mem | awk 'NR<=10{print $0}')
    echo "$(date): Top 10 memory-consuming processes:" >> $LOGFILE
    echo "$HIGH_PROCESSES" >> $LOGFILE
}

# Main function to call checks
check_cpu
check_memory
check_disk
check_processes
```

### Instructions to Run the Script:
1. Save the script as `system_health_monitor.sh`.
2. Make it executable: `chmod +x system_health_monitor.sh`.
3. Run it: `./system_health_monitor.sh`.
4. Check the log file at `/var/log/system_health.log`.

### 2. Automated Backup Solution (Python)

This Python script automates the backup of a specified directory to a remote server via `rsync`. It also reports on the success or failure of the operation.

```python
import os
import subprocess
from datetime import datetime

# Configuration
SOURCE_DIR = "/path/to/source_directory"
REMOTE_DIR = "user@remote_host:/path/to/backup_directory"
LOGFILE = "backup_report.log"

def log_message(message):
    with open(LOGFILE, "a") as log_file:
        log_file.write(f"{datetime.now()}: {message}\n")

def backup():
    try:
        # Run the rsync command
        subprocess.check_call(["rsync", "-avz", SOURCE_DIR, REMOTE_DIR])
        log_message(f"Backup successful from {SOURCE_DIR} to {REMOTE_DIR}.")
    except subprocess.CalledProcessError as e:
        log_message(f"Backup failed: {str(e)}")

if __name__ == "__main__":
    backup()
```

### Instructions to Run the Script:
1. Save the script as `automated_backup.py`.
2. Modify the `SOURCE_DIR` and `REMOTE_DIR` variables.
3. Ensure you have SSH access to the remote server.
4. Run it: `python automated_backup.py`.
5. Check the `backup_report.log` for success or failure messages.

### Conclusion
These scripts will help you monitor your system health and automate backups efficiently. Adjust thresholds and paths as necessary for your environment!
